pipeline {
    agent any
    
   /* parameters {
      string name: 'imagesName', defaultValue: '\'aliyun.docker.registry:5000/gwk8s/test:v0.0.1.${BUILD_NUMBER}\' ', description: '', trim: false
    }*/
    environment {
      repo = "aliyun.docker.registry:5000"
      imageName = "demo/test:v0.0.1.${BUILD_NUMBER}"
    }

    tools {
        maven 'apache-maven-3.5.3'
        jdk 'jdk-10.0.1'
    }

    stages {
        stage('初始化') {
            steps {
               sh 'echo \'aliyun.docker.registry 10.10.1.141\' >> /etc/hosts '
            }
        }
        
        stage('CheckOut') {
            steps {
               git credentialsId: 'd3e953c3-60e2-43c7-928e-a787a4600c3a', url: 'https://github.com/denver1986/testk8s.git'
            }
        }
        
        /*stage('sleep') {
            steps {
                sh 'pwd'
                sleep time: 1, unit: 'DAYS'
            }
        }*/
        
        stage('编译') {
            steps {
                sh 'mvn -f TEST_K8S/ clean package -U -Pproduction -Dmaven.test.skip=true'
            }
        }
        
        stage('测试') {
            parallel {
		        stage('单元测试') {
		          steps {
		            echo 'hello'
		          }
		        }
		        stage('API测试') {
		          steps {
		            echo '11'
		          }
		        }
		        stage('覆盖率测试') {
		          steps {
		            echo 'p2'
		          }
		        }
      		}
        }
        
        stage('生成镜像') {
            steps{
                script {
                    /*def content = readFile 'TEST_K8S/target/maven-archiver/pom.properties'
                    println content
                    Properties pomProperties = new Properties()
                    this.getClass().getResource( '/application.properties' ).withInputStream {   properties.load(it)}
                    File propertiesFile = new File('/home/jenkins/workspace/Master/TEST_K8S/target/maven-archiver/pom.properties')
                    propertiesFile.withInputStream {
                        pomProperties.load(it)
                    }
                    InputStream is = new ByteArrayInputStream(content.getBytes());
                    pomProperties.load(is)
                    def version = pomProperties.version.toLowerCase()
                    def groupId = pomProperties.groupId.toLowerCase()
                    def artifactId = pomProperties.artifactId.toLowerCase()
                    def imagesName = "${groupId}/${artifactId}:${version}.${BUILD_NUMBER}"
                    println imagesName*/
                    
                    //def imageName = "demo/test:v0.0.1.${BUILD_NUMBER}"
                    docker.withRegistry("http://${repo}") {  
                       docker.build("${imageName}",'TEST_K8S/').push()
                    }
                }
            }
        }
        
        stage('部署到集群') {
            steps {
                sh 'cp -r /jenkins/tools/.kube ~/.kube'
                sh "kubectl set image deployment/gwk8stest gwk8stest=${repo}/${imageName}"
            }
        }
    }
}